entry_type: ModelCollisionGeometry
imports:
  h1/tags/common:
    - Index
    - Fraction
    - TagDependency
    - MaterialType
    - FunctionType
    - Block
    - TagString
    - Point3D
    - Plane3D
    - Plane2D
type_defs:
  ModelCollisionGeometryFlags:
    class: bitfield
    size: 4
    bits:
      - name: takes_shield_damage_for_children
      - name: takes_body_damage_for_children
      - name: always_shields_friendly_damage
      - name: passes_area_damage_to_children
      - name: parent_never_takes_body_damage_for_us
      - name: only_damaged_by_explosives
      - name: only_damaged_while_occupied
  ModelCollisionGeometryMaterialFlags:
    class: bitfield
    size: 4
    bits:
      - name: head
  ModelCollisionGeometryMaterial:
    class: struct
    assert_size: 72
    fields:
      - name: name
        type: TagString
        meta:
          read_only: true
      - name: flags
        type: ModelCollisionGeometryMaterialFlags
      - name: material_type
        type: MaterialType
      - type: pad
        size: 2
      - name: shield_leak_percentage
        type: Fraction
      - name: shield_damage_multiplier
        type: float
      - type: pad
        size: 12
      - name: body_damage_multiplier
        type: float
      - type: pad
        size: 8
  ModelCollisionGeometryRegionFlags:
    class: bitfield
    size: 4
    bits:
      - name: lives_until_object_dies
      - name: forces_object_to_die
      - name: dies_when_object_dies
      - name: dies_when_object_is_damaged
      - name: disappears_when_shield_is_off
      - name: inhibits_melee_attack
        comments:
          en: >
            Prevents melee attacks by the unit when this region is destroyed.
            Used for the Flood's arms, for example.
      - name: inhibits_weapon_attack
      - name: inhibits_walking
      - name: forces_drop_weapon
        comments:
          en: >
            Causes the unit to drop its held weapon when this region is
            destroyed, such as shooting the arms off of Flood.
      - name: causes_head_maimed_scream
  ModelCollisionGeometryPermutation:
    class: struct
    assert_size: 32
    meta:
      read_only: true
    fields:
      - name: name
        type: TagString
  ModelCollisionGeometryRegion:
    class: struct
    assert_size: 84
    fields:
      - name: name
        type: TagString
        meta:
          read_only: true
      - name: flags
        type: ModelCollisionGeometryRegionFlags
      - type: pad
        size: 4
      - name: damage_threshold
        type: float
      - type: pad
        size: 12
      - name: destroyed_effect
        type: TagDependency
        meta:
          tag_classes:
            - effect
      - name: permutations
        type: Block
        type_args:
          T: ModelCollisionGeometryPermutation
        meta:
          hek_max_count: 32
          read_only: true
  ModelCollisionGeometryModifier:
    class: struct
    assert_size: 52
    fields:
      - type: pad
        size: 52
  ModelCollisionGeometrySphere:
    class: struct
    assert_size: 32
    fields:
      - name: node
        type: Index
        meta:
          index_of: nodes
      - type: pad
        size: 2
      - type: pad
        size: 12
      - name: center
        type: Point3D
      - name: radius
        type: float
  ModelCollisionGeometryBSP3DNode:
    class: struct
    assert_size: 12
    meta:
      read_only: true
    fields:
      - name: plane
        type: uint32
        comments:
          en: >
            An index into the _planes_ block. The plane divides 3D space into
            front and back half-spaces. A point can be tested against this plane to
            determine which half-space to descend into.


            [Tool](~h1a-tool) will create new planes or use existing surface planes when
            generating the BSP tree based on a heuristic of how many surfaces
            remain in the node. For 1024 and above, axis-aligned planes based on
            vertex bounds are used. Otherwise, the surface within the remaining
            set whose plane minimizes the difference between front and back surface
            counts is used. In the case of levels, only collideable surfaces and
            portal planes are candidates.
      - name: back_child
        type: uint32
        meta:
          flagged: true
        comments:
          en: >-
            Index of the BSP3D node representing space to the back of the dividing
            plane. A value of `0xFFFFFFFF` is considered null and the space behind
            the plane is considered _outside_ the sealed BSP (Sapien labels this as
            "solid" space when using `debug_structure`). Otherwise, if the highest
            order bit is set (`0x80000000`), the remaining 31 bits (mask `0x7FFFFFFF`)
            represent an index into the _leaves_ block.
      - name: front_child
        type: uint32
        meta:
          flagged: true
        comments:
          en: Similar to the _back child_ field.
  ModelCollisionGeometryBSPPlane:
    class: struct
    assert_size: 16
    meta:
      read_only: true
    fields:
      - name: plane
        type: Plane3D
        comments:
          en: A plane which divides 3D space in two.
  ModelCollisionGeometryBSPLeafFlags:
    class: bitfield
    size: 2
    bits:
      - name: contains_double_sided_surfaces
        comments:
          en: >
            Indicates if any surface in any of this leaf's 2D BSPs is
            double-sided (e.g. glass).
  ModelCollisionGeometryBSPLeaf:
    class: struct
    assert_size: 8
    meta:
      read_only: true
    fields:
      - name: flags
        type: ModelCollisionGeometryBSPLeafFlags
        comments:
          en: Flags used to optimize collision checks at runtime.
      - name: bsp2d_reference_count
        type: uint16
        comments:
          en: Determines how many contiguous 2D BSP references belong to this leaf.
      - name: first_bsp2d_reference
        type: uint32
        comments:
          en: >
            Index of the first 2D BSP reference associated with this leaf. It
            will be followed by a number of other 2D BSP references according to
            the above count.
  ModelCollisionGeometryBSP2DReference:
    class: struct
    assert_size: 8
    meta:
      read_only: true
    fields:
      - name: plane
        type: uint32
        meta:
          flagged: true
        comments:
          en: >
            Index for the plane used to decide what basis plane is best to project
            on (X,Y), (Y,Z) or (X,Z). The basis plane is chosen by the referenced
            plane's most significant normal component. A flagged plane index means
            its normal vector is opposite.
      - name: bsp2d_node
        type: uint32
        meta:
          flagged: true
        comments:
          en: >-
            The starting node for the 2D BSP on this plane. If flagged, then the
            index (masked to `0x7FFFFFFF`) refers to a surface instead. Null if
            `0xFFFFFFFF`.
  ModelCollisionGeometryBSP2DNode:
    class: struct
    assert_size: 20
    meta:
      read_only: true
    fields:
      - name: plane
        type: Plane2D
        comments:
          en: >
            A 2D plane (line) subdividing left and right child surfaces. This
            line is in the space of the 2D BSP reference's basis plane.
      - name: left_child
        type: uint32
        meta:
          flagged: true
        comments:
          en: >-
            refers to a BSP2D node if not signed and a surface if sign bit is
            set; null if `0xFFFFFFFF`.
      - name: right_child
        type: uint32
        meta:
          flagged: true
        comments:
          en: >-
            refers to a BSP2D node if not signed and a surface if sign bit is
            set; null if `0xFFFFFFFF`.
  ModelCollisionGeometryBSPSurfaceFlags:
    class: bitfield
    size: 1
    bits:
      - name: two_sided
      - name: invisible
      - name: climbable
        comments:
          en: Indicates if the surface is a climbable ladder.
      - name: breakable
        comments:
          en: >
            Indicates if the surface is breakable. The surface must also have
            a breakable surface index below.bit there cannot be more than 256
            unique breakable surfaces in a BSP.
  ModelCollisionGeometryBSPSurface:
    class: struct
    assert_size: 12
    meta:
      read_only: true
    fields:
      - name: plane
        type: uint32
        meta:
          flagged: true
        comments:
          en: >
            Index into the planes block for this surface's plane. Note that
            multiple co-planar surfaces may reference the same plane since this
            plane index is a copy of the parent bsp2d reference's plane index,
            even when flagged.
      - name: first_edge
        type: uint32
      - name: flags
        type: ModelCollisionGeometryBSPSurfaceFlags
      - name: breakable_surface
        type: int8
        comments:
          en: >
            Index into this tag's breakable surfaces block. It is unknown if
            this is a signed or flagged field, but since it is 8-bit there cannot
            be more than 256 unique breakable surfaces in a BSP.
      - name: material
        type: Index
  ModelCollisionGeometryBSPEdge:
    class: struct
    assert_size: 24
    meta:
      read_only: true
    fields:
      - name: start_vertex
        type: uint32
      - name: end_vertex
        type: uint32
      - name: forward_edge
        type: uint32
      - name: reverse_edge
        type: uint32
      - name: left_surface
        type: uint32
      - name: right_surface
        type: uint32
  ModelCollisionGeometryBSPVertex:
    class: struct
    assert_size: 16
    meta:
      read_only: true
    fields:
      - name: point
        type: Point3D
      - name: first_edge
        type: uint32
  ModelCollisionGeometryBSP:
    class: struct
    assert_size: 96
    meta:
      pre_compile: true
      read_only: true
    fields:
      - name: bsp3d_nodes
        type: Block
        type_args:
          T: ModelCollisionGeometryBSP3DNode
        meta:
          hek_max_count: 131072
        comments:
          en: >
            A block of nodes used to efficiently find collideable surfaces.
            Each node divides space with an infinite plane and references two
            child nodes by index into this block. The first element in the block
            is the root node. A test point can be recursively tested against planes
            to find a _leaf_ of potentially colliding surfaces.
      - name: planes
        type: Block
        type_args:
          T: ModelCollisionGeometryBSPPlane
        meta:
          hek_max_count: 65536
        comments:
          en: >
            Planes are infinite 2D surfaces in 3D space. They are used both to
            subdivide the BSP in each bsp3d node and to define collideable surfaces.
            The first 8 planes in the block seem to serve a special purpose --
            the first 4 define the XY bounding box, with the next 4 axis aligned
            planes unkown. Furthermore, the last 8 planes in the block are used
            for the first few levels of bsp3d nodes. A single plane may be referenced
            from multiple bsp3d nodes since the surfaces that planes derive from
            can also be found in multiple leaves.
      - name: leaves
        type: Block
        type_args:
          T: ModelCollisionGeometryBSPLeaf
        meta:
          hek_max_count: 65536
        comments:
          en: >
            Leaves mark the transition between the 3D BSP and a collection of
            convex collideable surfaces in the same localized area. Each set of
            co-planar surfaces within this leaf is stored within a child 2D BSP.


            Note that surfaces may be found under **multiple leaves**, since any
            surface which is not completely on either side of a 3D plane will
            need to belong to both child 3D BSP nodes.
      - name: bsp2d_references
        type: Block
        type_args:
          T: ModelCollisionGeometryBSP2DReference
        meta:
          hek_max_count: 131072
        comments:
          en: >
            Represents either a 2D BSP of surfaces, or a singular surface if the
            node index is flagged. In either case, test points or 3D line traces
            should be projected onto the basis plane in order to continue.
      - name: bsp2d_nodes
        type: Block
        type_args:
          T: ModelCollisionGeometryBSP2DNode
        meta:
          hek_max_count: 65535
      - name: surfaces
        type: Block
        type_args:
          T: ModelCollisionGeometryBSPSurface
        meta:
          hek_max_count: 131072
        comments:
          en: >
            Surfaces are planar collideable polygons. They are not necessarily
            triangular and may have up to 8 edges. BSP collision surfaces can
            be visualized in [Sapien](~h1a-sapien) using `debug_structure 1`. These
            surfaces are not used for the rendered geometry.
      - name: edges
        type: Block
        type_args:
          T: ModelCollisionGeometryBSPEdge
        meta:
          hek_max_count: 262144
        comments:
          en: >
            Edges, surfaces, and vertices form a data structure called a
            _[doubly connected edge list (DCEL)](https://en.wikipedia.org/wiki/Doubly_connected_edge_list)_,
            also known as a _half-edge data structure_. The edges and their
            vertices define the boundaries of the collideable surfaces within a leaf.
      - name: vertices
        type: Block
        type_args:
          T: ModelCollisionGeometryBSPVertex
        meta:
          hek_max_count: 131072
        comments:
          en: The 3D coordinates used for edge starting and ending locations.
  ModelCollisionGeometryNode:
    class: struct
    assert_size: 64
    meta:
      read_only: true
    fields:
      - name: name
        type: TagString
      - name: region
        type: Index
      - name: parent_node
        type: Index
        meta:
          index_of: nodes
      - name: next_sibling_node
        type: Index
        meta:
          index_of: nodes
      - name: first_child_node
        type: Index
        meta:
          index_of: nodes
      - type: pad
        size: 10
      - name: name_thing
        type: int16
        meta:
          cache_only: true
      - name: bsps
        type: Block
        type_args:
          T: ModelCollisionGeometryBSP
        meta:
          hek_max_count: 32
  ModelCollisionGeometry:
    class: struct
    meta:
      tag_id: coll
      pre_compile: true
      post_compile: true
    comments:
      en: >-
        Contains the collision mesh (also referred to as hitbox) for
        [objects](~object) as well as information about health and shields.
    assert_size: 664
    fields:
      - name: flags
        type: ModelCollisionGeometryFlags
      - name: indirect_damage_material
        type: Index
      - type: pad
        size: 2
      - name: maximum_body_vitality
        type: float
        comments:
          en: >
            Sets the maximum amount of health that a [unit](~) has (damage hit
            points). For example, the cyborg [biped](~) has a value of 75. This
            value can also be changed at runtime for individual units by using
            `unit_set_maximum_vitality` in scripts.
      - name: body_system_shock
        type: float
      - type: pad
        size: 24
      - type: pad
        size: 28
      - name: friendly_damage_resistance
        type: Fraction
        meta:
          min: 0
          max: 1
      - type: pad
        size: 8
      - type: pad
        size: 32
      - name: localized_damage_effect
        type: TagDependency
        meta:
          tag_classes:
            - effect
      - name: area_damage_effect_threshold
        type: float
        meta:
          min: 0
          max: 1
      - name: area_damage_effect
        type: TagDependency
        meta:
          tag_classes:
            - effect
      - name: body_damaged_threshold
        type: float
      - name: body_damaged_effect
        type: TagDependency
        meta:
          tag_classes:
            - effect
      - name: body_depleted_effect
        type: TagDependency
        meta:
          tag_classes:
            - effect
      - name: body_destroyed_threshold
        type: float
      - name: body_destroyed_effect
        type: TagDependency
        meta:
          tag_classes:
            - effect
      - name: maximum_shield_vitality
        type: float
        comments:
          en: >
            Sets the maximum amount of shields that a [unit](~) has (damage hit
            points). For example, the cyborg [biped](~) has a value of 75. This
            value can also be changed at runtime for individual units by using
            `unit_set_maximum_vitality` in scripts.
      - type: pad
        size: 2
      - name: shield_material_type
        type: MaterialType
        comments:
          en: >
            Determines which [damage_effect](~) material modifier is used when
            applying damage to the shield.
      - type: pad
        size: 24
      - name: shield_failure_function
        type: FunctionType
      - type: pad
        size: 2
      - name: shield_failure_threshold
        type: Fraction
      - name: failing_shield_leak_fraction
        type: Fraction
      - type: pad
        size: 16
      - name: minimum_stun_damage
        type: float
      - name: stun_time
        type: float
        meta:
          unit: seconds
      - name: recharge_time
        type: float
        meta:
          unit: seconds
      - type: pad
        size: 16
      - type: pad
        size: 96
      - name: shield_damaged_threshold
        type: float
      - name: shield_damaged_effect
        type: TagDependency
        meta:
          tag_classes:
            - effect
      - name: shield_depleted_effect
        type: TagDependency
        meta:
          tag_classes:
            - effect
      - name: shield_recharging_effect
        type: TagDependency
        meta:
          tag_classes:
            - effect
      - type: pad
        size: 8
      - name: shield_recharge_rate
        type: float
        meta:
          cache_only: true
        endianness: little
      - type: pad
        size: 112
      - name: materials
        type: Block
        type_args:
          T: ModelCollisionGeometryMaterial
        meta:
          hek_max_count: 32
          read_only: true
      - name: regions
        type: Block
        type_args:
          T: ModelCollisionGeometryRegion
        meta:
          hek_max_count: 8
          read_only: true
      - name: modifiers
        type: Block
        type_args:
          T: ModelCollisionGeometryModifier
        meta:
          read_only: true
      - type: pad
        size: 16
      - name: x
        type: Bounds
        type_args:
          T: float
      - name: 'y'
        type: Bounds
        type_args:
          T: float
      - name: z
        type: Bounds
        type_args:
          T: float
      - name: pathfinding_spheres
        type: Block
        type_args:
          T: ModelCollisionGeometrySphere
        meta:
          hek_max_count: 32
          h1a_ek_max_count: 256
          volatile: true
        comments:
          en: >-
            Spheres which approximate the shape of the model for
            [AI pathfinding](~ai#pathfinding) avoidance. The sphere limit was
            increased to match Reach's in H1A.
      - name: nodes
        type: Block
        type_args:
          T: ModelCollisionGeometryNode
        meta:
          hek_max_count: 64
          read_only: true
